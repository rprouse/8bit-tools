namespace bin2hex.Tests;

public class IntelHexFileTests
{
    [TestCaseSource(nameof(CalculateChecksumData))]
    public void CalculateChecksum_ReturnsCorrectChecksum(List<byte> bytes, int checksum)
    {
        byte result = IntelHexFile.CalculateChecksum(bytes);
        result.Should().Be((byte)checksum);
    }

    [TestCaseSource(nameof(ToHexStringData))]
    public void ToHexString_ReturnsCorrectHexString(List<byte> bytes, string expected)
    {
        string result = bytes.ToHexString();
        result.Should().Be(expected);
    }

    [TestCaseSource(nameof(CreateRecordData))]
    public void CreateRecord_ReturnsCorrectRecord(HexRecordType recordType, int address, byte[] data, string expected)
    {
        string result = IntelHexFile.CreateRecord(recordType, (ushort)address, data);
        result.Should().Be(expected);
    }

    [Test]
    public void LongCreateRecord_ThrowsArgumentException()
    {
        Action act = () => IntelHexFile.CreateRecord(HexRecordType.Data, 0x0000, new byte[256]);
        act.Should().Throw<ArgumentException>();
    }

    [Test]
    public void CanConvertBinaryToHex()
    {
        byte[] binary = new byte[]
        {
            0x21, 0x46, 0x01, 0x36, 0x01, 0x21, 0x47, 0x01, 0x36, 0x00, 0x7E, 0xFE, 0x09, 0xD2, 0x19, 0x01,
            0x21, 0x46, 0x01, 0x7E, 0x17, 0xC2, 0x00, 0x01, 0xFF, 0x5F, 0x16, 0x00, 0x21, 0x48, 0x01, 0x19,
            0x19, 0x4E, 0x79, 0x23, 0x46, 0x23, 0x96, 0x57, 0x78, 0x23, 0x9E, 0xDA, 0x3F, 0x01, 0xB2, 0xCA,
            0x3F, 0x01, 0x56, 0x70, 0x2B, 0x5E, 0x71, 0x2B, 0x72, 0x2B, 0x73, 0x21, 0x46, 0x01, 0x34, 0x21,
            0x00, 0x01, 0x02
        };

        string expected = ":10010000214601360121470136007EFE09D2190140\n:100110002146017E17C20001FF5F16002148011928\n:10012000194E79234623965778239EDA3F01B2CAA7\n:100130003F0156702B5E712B722B732146013421C7\n:03014000000102B9\n:00000001FF\n";

        string result = IntelHexFile.ConvertBinaryToHex(binary, 0x0100);

        result.Should().Be(expected);
    }

    public static IEnumerable<object[]> CalculateChecksumData =>
        new List<object[]>
        {
            new object[] { new List<byte> { 0x10, 0x01, 0x00, 0x00, 0x21, 0x46, 0x01, 0x36, 0x01, 0x21, 0x47, 0x01, 0x36, 0x00, 0x7E, 0xFE, 0x09, 0xD2, 0x19, 0x01 }, 0x40 },
            new object[] { new List<byte> { 0x10, 0x01, 0x10, 0x00, 0x21, 0x46, 0x01, 0x7E, 0x17, 0xC2, 0x00, 0x01, 0xFF, 0x5F, 0x16, 0x00, 0x21, 0x48, 0x01, 0x19 }, 0x28 },
            new object[] { new List<byte> { 0x10, 0x01, 0x20, 0x00, 0x19, 0x4E, 0x79, 0x23, 0x46, 0x23, 0x96, 0x57, 0x78, 0x23, 0x9E, 0xDA, 0x3F, 0x01, 0xB2, 0xCA }, 0xA7 },
            new object[] { new List<byte> { 0x10, 0x01, 0x30, 0x00, 0x3F, 0x01, 0x56, 0x70, 0x2B, 0x5E, 0x71, 0x2B, 0x72, 0x2B, 0x73, 0x21, 0x46, 0x01, 0x34, 0x21 }, 0xC7 },
            new object[] { new List<byte> { 0x00, 0x00, 0x00, 0x01 }, 0xFF }
        };

    public static IEnumerable<object[]> ToHexStringData =>
        new List<object[]>
        {
            new object[] { new List<byte> { 0x10, 0x01, 0x00, 0x00, 0x21, 0x46, 0x01, 0x36, 0x01, 0x21, 0x47, 0x01, 0x36, 0x00, 0x7E, 0xFE, 0x09, 0xD2, 0x19, 0x01 }, ":10010000214601360121470136007EFE09D21901\n" },
            new object[] { new List<byte> { 0x10, 0x01, 0x10, 0x00, 0x21, 0x46, 0x01, 0x7E, 0x17, 0xC2, 0x00, 0x01, 0xFF, 0x5F, 0x16, 0x00, 0x21, 0x48, 0x01, 0x19 }, ":100110002146017E17C20001FF5F160021480119\n" },
            new object[] { new List<byte> { 0x10, 0x01, 0x20, 0x00, 0x19, 0x4E, 0x79, 0x23, 0x46, 0x23, 0x96, 0x57, 0x78, 0x23, 0x9E, 0xDA, 0x3F, 0x01, 0xB2, 0xCA }, ":10012000194E79234623965778239EDA3F01B2CA\n" },
            new object[] { new List<byte> { 0x10, 0x01, 0x30, 0x00, 0x3F, 0x01, 0x56, 0x70, 0x2B, 0x5E, 0x71, 0x2B, 0x72, 0x2B, 0x73, 0x21, 0x46, 0x01, 0x34, 0x21 }, ":100130003F0156702B5E712B722B732146013421\n" },
            new object[] { new List<byte> { 0x00, 0x00, 0x00, 0x01 }, ":00000001\n" }
        };

    public static IEnumerable<object[]> CreateRecordData =>
        new List<object[]>
        {
            new object[] { HexRecordType.Data, 0x0100, new byte[] { 0x21, 0x46, 0x01, 0x36, 0x01, 0x21, 0x47, 0x01, 0x36, 0x00, 0x7E, 0xFE, 0x09, 0xD2, 0x19, 0x01 }, ":10010000214601360121470136007EFE09D2190140\n" },
            new object[] { HexRecordType.Data, 0x0110, new byte[] { 0x21, 0x46, 0x01, 0x7E, 0x17, 0xC2, 0x00, 0x01, 0xFF, 0x5F, 0x16, 0x00, 0x21, 0x48, 0x01, 0x19 }, ":100110002146017E17C20001FF5F16002148011928\n" },
            new object[] { HexRecordType.Data, 0x0120, new byte[] { 0x19, 0x4E, 0x79, 0x23, 0x46, 0x23, 0x96, 0x57, 0x78, 0x23, 0x9E, 0xDA, 0x3F, 0x01, 0xB2, 0xCA }, ":10012000194E79234623965778239EDA3F01B2CAA7\n" },
            new object[] { HexRecordType.Data, 0x0130, new byte[] { 0x3F, 0x01, 0x56, 0x70, 0x2B, 0x5E, 0x71, 0x2B, 0x72, 0x2B, 0x73, 0x21, 0x46, 0x01, 0x34, 0x21 }, ":100130003F0156702B5E712B722B732146013421C7\n" },
            new object[] { HexRecordType.EndOfFile, 0x0000, new byte[] { }, ":00000001FF\n" }
        };
}